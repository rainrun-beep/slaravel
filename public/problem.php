<?php

/**
 * mysql中查询优化思路?
 *       何减少Nested Loop 的循环总次数？最有效的办法只有一个，那就是让驱动表的结果集尽可能的小。
 *       优先优化Nested Loop 的内层循环
 *       保证Join 语句中被驱动表上Join 条件字段已经被索引
 *       当无法保证被驱动表的Join 条件字段被索引且内存资源充足的前提下，不要太吝惜Join Buffer的设置
 * 
 * mysql中字符串类型char和varchar有什么区别, 使用场景都是什么?
 *       varchar(N), 这里的Ｎ是指字符数，并不是字节数．占用的字节数与编码有关
 *              latin1:1character=1byte, 1汉字=2character,
 *              也就是说一个字段定义成 varchar(200)，则它可以存储100个汉字或者200个字母.
 *              
 *              utf8:1character=3bytes, 1汉字=1character
 *              也就是说一个字段定义成 varchar(200)，则它可以存储200个汉字或者200个字母
 * 
 *              gbk:1character=2bytes,1汉字=1character
 *              也就是说一个字段定义成 varchar(200)，则它可以存储200个汉字或者200个字母。
 * 
 *       由于char是固定长度的,所以它的处理速度比varchar快得多,但是其缺点是浪费存储空间,程序需要对尾行空格进行处理,所以对那些变化不打并且查询速度有较高的 要求的数据可以考虑使用char类型来存储
 * 
 *       在mysql中,不同的存储引擎对char和varchar的使用原则有所不同
 *              myisam存储引擎
 *                  建议使用固定长度的数列代替可变长度的数据列
 * 
 *              innodb存储引擎
 *                  建议使用varchar类型, 对于innodb数据表, 内部的行存储格式没有区分固定长度和可变长度,因此使用char列不一定比可变长度的varchar性能好
 *                  由于char平均占用空间多余varchar,因此varchar来ui消化需要处理的数据的存储总量和磁盘io是比较好的
 * 
 * mysql中时间类型使用场景都是什么?
 *       DATETIME
 *            DATETIME 用于表示年月日时分秒，并且记录的年份（见上表）比较长久。如果实际应用中有这样的需求，就可以使用 DATETIME 类型。
 *            1、DATETIME列可以设置为多个，默认可为null，可以手动设置其值。
 *            2、DATETIME列不可设定默认值。
 *            3、DATETIME列可以变相的设定默认值，比如通过触发器、或者在插入数据时候，将DATETIME字段值设置为now()，这样可以做到了，尤其是后者，在程序开 发中常常用到。
 * 
 *       TIMESTAMP
 *            timestamp表示年月日时分秒,但是记录的年份(和上表比较)短暂,timestamp列必须有默认值,默认值可为"0000-00-00 00:00:00", 但不能为null, timestamp和时区有关,能反映当前时间,当插入日期时,会先转换为本地时区在存放, 当查询日期时, 会将日期转换为本地时区后再显示
 * 
 * 
 * mysql主从复制应用场景?
 *       1. 从服务器作为主服务器的实时数据备份
 *       2. 主从服务器实时读写分离,从服务器实现负载均衡
 *       3. 把多个从服务器根据业务重要性就行拆分访问
 * 
 * mysql主从复制的优点?
 *       1. 如果主库出现问题，可以快速切换到从库提供服务
 *       2. 可以在从库执行查询操作，降低主库的访问压力
 *       3. 可以在从库进行备份,以免备份期间影响主库的服务
 * 
 * mysql主从复制解决的问题?
 *       1. 数据分布
 *       2. 负载均衡
 *       3. 数据备份,保证数据安全
 *       4. 高可用性和容错性
 *       5. 实现读写分离, 缓解数据库压力
 * 注意: 由于mysql实现的异步复制, 所以主库和从库数据之间存在一定的差异, 在从库执行查询操作需要考虑这些数据的差异, 一般只有更新不频繁和对实时性要求不高的数据可以通过从库查询,实行要求高的仍要从主库查询
 * 
 * mysql需要数据备份的常见情况?
 *       1. 数据丢失应用场景
 *          (2) 软件bug造成数据部分或全部丢失
 *          (3) 硬件故障造成数据库数据部分或全部丢失
 *          (4) 因安全漏洞,入侵者将数据恶意破坏
 *       2. 非数据丢失应用场景
 *          (1) 特殊应用场景下基于时间点的数据恢复
 *          (2) 开发测试环境数据库搭建
 *          (3) 相同数据库的新环境搭建
 *          (4) 数据库或数据迁移
 * 
 * mysql中的物理备份和逻辑备份的区别, 优缺点?
 *      flush tables with read lock (关闭所有打开的表并使用全局读锁锁定所有数据库的所有表)
 *      逻辑备份:
 *              优点: 
 *                  1.恢复简单，可以使用管道将他们输入到mysql
 *                  2.与存储引擎无关, 因为是从Mysql服务器中提取数据而生成的, 所以消除了底层数据存储的不同
 *                  3.有助于避免数据损坏, 若磁盘驱动器有故障而要复制原始文件时,此时将得到一个损坏的备份
 * 
 *              缺点:
 *                  1. 必须有数据库服务器完成逻辑工作, 需要更多的cpu周期
 *                  2. 逻辑备份还原速度慢:需要mysql加载和解释语句,转化存储格式,重建引擎
 * 
 *     物理备份:
 *             优点:
 *                 1.基于文件的物理备份
 *                 2.容易跨平台,跨操作系统和mysql版本
 *                 3.恢复起来会更快(不需要执行任何的mysql语句,不需要构建索引,innodb表无需完全缓存到内存)
 * 
 *             缺点:
 *                 1.文件大
 *                 2.不总是可以跨平台,操作系统和mysql版本                
 *       
 * 
 */